// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Admin {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  userName    String
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companies   Company[]
}

model Company {
  id        String   @id @default(cuid())
  name      String
  acronym   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id])
  adminId   String
  offices   Office[]
}

model Office {
  id            String   @id @default(cuid())
  name          String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String
  teamManagers  TeamManager[]
  employees     Employee[]
  objects       Object[]
}

model PointsOfMap {
  id         String   @id @default(cuid())
  xCoord     String
  yCoord     String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Ticket {
  id                String      @id @default(cuid())
  nameOfSender      String?
  lastNameOfSender  String?
  emailOfSender     String?
  title             String
  description       String
  importance        String
  status            String
  pcRequest         String?
  meetings          String?
  dateMeeting       DateTime?
  timeMeeting       DateTime?
  placeMeeting      String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  pcDetails         PcDetails?
  teamManager       TeamManager? @relation(fields: [teamManagerId], references: [id])
  teamManagerId     String? 
}

model PcDetails {
  id            String @id @default(cuid())
  bought        DateTime?
  userName      String
  password      String
  ipAddress     String?
  macAddress    String?
  ramMemory     String?
  storage       String?
  typeOfStorage String?
  proccessor    String?
  motherBoard   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  ticketId      String    @unique
}

model TeamManager {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  userName    String
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  office      Office    @relation(fields: [officeId], references: [id])
  officeId    String
  tickets     Ticket[]
}

model Employee {
  id            String      @id @default(cuid())
  employeeId    String?
  firstName     String
  lastName      String
  email         String
  phoneNumber   String?
  userName      String
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  office        Office      @relation(fields: [officeId], references: [id])
  officeId      String
  objects       Object[]
}

model Object {
  id            String        @id @default(cuid())
  name          String
  status        String
  bought        DateTime
  description   String?
  pcDetails     String?
  userName      String?
  password      String?
  ipAddress     String?
  macAddress    String?
  ramMemory     String?
  storage       String?
  typeOfStorage String?
  proccessor    String?
  motherBoard   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  office        Office?       @relation(fields: [officeId], references: [id])
  officeId      String?
  employee      Employee?     @relation(fields: [employeeId], references: [id])
  employeeId    String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
